import tkinter as tk
import requests

api_url = 'https://api.binance.us/api/v3/ticker/price'

api_key = ''
api_secret = ''

class CryptoPriceApp(tk.Tk):
    def __init__(self):
        super().__init__()

        self.title('ACH')
        self.geometry('200x150')

        self.symbol_var = tk.StringVar(value='ACHUSD')  # default to Ethereum
        self.price_var = tk.StringVar(value='')

        self.symbol_label = tk.Label(self, text='Symbol:')
        self.symbol_label.pack()

        self.symbol_entry = tk.Entry(self, textvariable=self.symbol_var)
        self.symbol_entry.pack()

        self.price_label = tk.Label(self, textvariable=self.price_var)
        self.price_label.pack()

        self.update_button = tk.Button(self, text='Update', command=self.update_price)
        self.update_button.pack()

        self.status_label = tk.Label(self, text='Status:', fg='red')
        self.status_label.pack()

        self.flash_status()

    def flash_status(self):
        symbol = self.symbol_var.get()
        headers = {'X-MBX-APIKEY': api_key}
        params = {'symbol': symbol}
        response = requests.get(api_url, headers=headers, params=params)

        if response.status_code == requests.codes.ok:
            
            data = response.json()
            price = float(data['price'])

            if price < 0.045:
                self.status_label.config(fg='red')
            elif price > 0.046:
                self.status_label.config(fg='green')
            else:
                self.status_label.config(fg='blue')
            self.status_label.after(1000, lambda: self.status_label.config(bg=self.status_label.cget('bg'), fg=self.status_label.cget('fg')))
            self.status_label.after(500, lambda: self.status_label.config(bg=self.status_label.cget('fg'), fg=self.status_label.cget('bg')))
        else:
            self.status_label.config(fg='red')

        
        self.status_label.after(1000, self.flash_status)

    def update_price(self):
        symbol = self.symbol_var.get()
        headers = {'X-MBX-APIKEY': api_key}
        params = {'symbol': symbol}
        response = requests.get(api_url, headers=headers, params=params)

        if response.status_code == requests.codes.ok:
            # Parse the API response
            data = response.json()
            price = data['price']
            self.price_var.set(f' {symbol[:-3]} is {price} USD')
        else:
            self.price_var.set('Failed to retrieve price data')

if __name__ == '__main__':
    app = CryptoPriceApp()
    app.mainloop()  
